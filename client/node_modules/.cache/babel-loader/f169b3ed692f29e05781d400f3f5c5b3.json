{"ast":null,"code":"import _defineProperty from \"/Users/marcel/Desktop/school/realtime-web/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport createAction from '../services/createActions';\nconst GET_PROJECTS = 'projects/GET_PROJECTS';\nconst GET_PROJECTS_SUCCESS = 'projects/GET_PROJECTS_SUCCES';\nconst GET_PROJECTS_FAILED = 'projects/GET_PROJECTS_FAILED';\nconst DELETE_PROJECT = 'projects/DELETE_PROJECT';\nconst DELETE_PROJECT_SUCCESS = 'projects/DELETE_PROJECT_SUCCESS';\nconst DELETE_PROJECT_FAILED = 'projects/DELETE_PROJECT_FAILED';\nconst POST_PROJECT = 'projects/POST_PROJECT';\nconst POST_PROJECT_SUCCESS = 'projects/POST_PROJECT_SUCCESS';\nconst POST_PROJECT_FAILED = 'project/POST_PROJECT_FAILED';\nconst initialState = {\n  projects: [],\n  loading: false,\n  error: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_PROJECTS:\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case GET_PROJECTS_SUCCESS:\n      return _objectSpread({}, state, {\n        projects: action.projects,\n        error: null\n      });\n\n    case GET_PROJECTS_FAILED:\n      return _objectSpread({}, state, {\n        error: action.error,\n        loading: true\n      });\n\n    case DELETE_PROJECT:\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case DELETE_PROJECT_SUCCESS:\n      return _objectSpread({}, state, {\n        projects: state.projects.filter(project => action.project._id !== project._id),\n        loading: false,\n        error: null\n      });\n\n    case DELETE_PROJECT_FAILED:\n      return _objectSpread({}, state, {\n        error: action.error,\n        loading: false\n      });\n\n    case POST_PROJECT:\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case POST_PROJECT_SUCCESS:\n      return _objectSpread({}, state, {\n        projects: [...state.projects, action.project],\n        error: null\n      });\n\n    case POST_PROJECT_FAILED:\n      return _objectSpread({}, state, {\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n});\nexport const requestPostProject = () => ({\n  type: POST_PROJECT\n});\nexport const PostProjectSucess = project => ({\n  type: POST_PROJECT_SUCCESS,\n  project\n});\nexport const postProjectFailed = error => ({\n  type: POST_PROJECT_FAILED,\n  error\n});\nexport const postProject = (projectname, description) => dispatch => new Promise(resolve => {\n  dispatch(requestPostProject());\n  axios.post('http://localhost:9000/projects/addProject', {\n    projectname,\n    description\n  }).then(res => {\n    console.log(\"RES\", res.data);\n    dispatch(PostProjectSucess(res.data));\n    resolve(res.data);\n  }).catch(error => {\n    dispatch(postProjectFailed(error));\n  });\n});\nexport const requestProjects = () => ({\n  type: GET_PROJECTS\n});\nexport const receiveProjects = projects => ({\n  type: GET_PROJECTS_SUCCESS,\n  projects\n});\nexport const receiveProjectsFail = error => ({\n  type: GET_PROJECTS_FAILED,\n  error\n});\nexport const fetchProjects = () => dispatch => new Promise(resolve => {\n  dispatch(requestProjects());\n  axios.get('http://localhost:9000/projects').then(res => {\n    dispatch(receiveProjects(res.data));\n    resolve(res.data);\n  }).catch(error => {\n    dispatch(receiveProjectsFail(error));\n  });\n});\nexport const projectDelete = () => ({\n  type: DELETE_PROJECT\n});\nexport const deleteProjectSuccess = project => ({\n  type: DELETE_PROJECT_SUCCESS,\n  project\n});\nexport const deleteProjectFailed = error => ({\n  type: DELETE_PROJECT_FAILED,\n  error\n});\nexport const deleteProject = id => dispatch => new Promise(resolve => {\n  dispatch(projectDelete());\n  axios.delete(\"http://localhost:9000/projects/deleteProject/\".concat(id)).then(res => {\n    dispatch(deleteProjectSuccess(res.data));\n    resolve(res.data);\n  }).catch(error => {\n    dispatch(deleteProjectFailed(error));\n  });\n});","map":{"version":3,"sources":["/Users/marcel/Desktop/school/realtime-web/client/src/ducks/projects.js"],"names":["axios","createAction","GET_PROJECTS","GET_PROJECTS_SUCCESS","GET_PROJECTS_FAILED","DELETE_PROJECT","DELETE_PROJECT_SUCCESS","DELETE_PROJECT_FAILED","POST_PROJECT","POST_PROJECT_SUCCESS","POST_PROJECT_FAILED","initialState","projects","loading","error","state","action","type","filter","project","_id","requestPostProject","PostProjectSucess","postProjectFailed","postProject","projectname","description","dispatch","Promise","resolve","post","then","res","console","log","data","catch","requestProjects","receiveProjects","receiveProjectsFail","fetchProjects","get","projectDelete","deleteProjectSuccess","deleteProjectFailed","deleteProject","id","delete"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport createAction from '../services/createActions';\n\nconst GET_PROJECTS = 'projects/GET_PROJECTS';\nconst GET_PROJECTS_SUCCESS = 'projects/GET_PROJECTS_SUCCES'\nconst GET_PROJECTS_FAILED = 'projects/GET_PROJECTS_FAILED'\n\nconst DELETE_PROJECT = 'projects/DELETE_PROJECT';\nconst DELETE_PROJECT_SUCCESS = 'projects/DELETE_PROJECT_SUCCESS'\nconst DELETE_PROJECT_FAILED = 'projects/DELETE_PROJECT_FAILED'\n\nconst POST_PROJECT = 'projects/POST_PROJECT'; \nconst POST_PROJECT_SUCCESS = 'projects/POST_PROJECT_SUCCESS';\nconst POST_PROJECT_FAILED = 'project/POST_PROJECT_FAILED';\n\nconst initialState = {\n    projects: [],\n    loading: false,\n    error: null,\n  };\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_PROJECTS:\n            return {\n              ...state,\n              loading: true,\n              error: null,\n            };\n        case GET_PROJECTS_SUCCESS:\n            return {\n                ...state,\n                projects: action.projects,\n                error: null,\n            };\n        case GET_PROJECTS_FAILED:\n            return {\n                ...state,\n                error: action.error,\n                loading: true,\n            };\n        case DELETE_PROJECT:\n            return {\n              ...state,\n              loading: true,\n              error: null,\n            };\n        case DELETE_PROJECT_SUCCESS: \n            return {\n              ...state,\n              projects: state.projects.filter(project => action.project._id !== project._id),\n              loading: false,\n              error: null,\n            };\n        case DELETE_PROJECT_FAILED:\n            return {\n              ...state,\n              error: action.error,\n              loading: false,\n            };\n        case POST_PROJECT: \n            return {\n              ...state,\n              loading: true,\n              error: null,\n            };\n        case POST_PROJECT_SUCCESS:\n            return {\n              ...state,\n              projects: [...state.projects, action.project], \n              error: null,\n            };\n        case POST_PROJECT_FAILED:\n            return {\n              ...state,\n              error: action.error,\n            };\n      default: \n        return state;\n    }\n  };\n\nexport const requestPostProject = () => ({ type: POST_PROJECT });\nexport const PostProjectSucess = project => ({ type: POST_PROJECT_SUCCESS, project });  \nexport const postProjectFailed = error => ({ type: POST_PROJECT_FAILED, error });\n\nexport const postProject = (projectname, description) => dispatch => new Promise((resolve) => {\n  dispatch(requestPostProject());\n\n  axios.post('http://localhost:9000/projects/addProject', {\n    projectname,\n    description,\n  })\n  .then((res) => {\n    console.log(\"RES\", res.data)\n    dispatch(PostProjectSucess(res.data))\n    resolve(res.data)\n  })\n  .catch((error) => {\n    dispatch(postProjectFailed(error));\n  })\n})\n\nexport const requestProjects = () => ({ type: GET_PROJECTS });\nexport const receiveProjects = projects => ({ type: GET_PROJECTS_SUCCESS, projects });\nexport const receiveProjectsFail = error => ({ type: GET_PROJECTS_FAILED, error });\n\nexport const fetchProjects = () => dispatch => new Promise((resolve) => {\n  dispatch(requestProjects());\n\n  axios.get('http://localhost:9000/projects')\n    .then((res) => {\n      dispatch(receiveProjects(res.data));\n      resolve(res.data);\n    })\n    .catch((error) => {\n      dispatch(receiveProjectsFail(error));\n    });\n  })\n\nexport const projectDelete = () => ({ type: DELETE_PROJECT });\nexport const deleteProjectSuccess = project => ({ type: DELETE_PROJECT_SUCCESS, project});\nexport const deleteProjectFailed = error => ({ type: DELETE_PROJECT_FAILED, error});\n\nexport const deleteProject = id => dispatch => new Promise((resolve) => {\n  dispatch(projectDelete());\n\n  axios.delete(`http://localhost:9000/projects/deleteProject/${id}`)\n    .then((res) => {\n    dispatch(deleteProjectSuccess(res.data))\n    resolve(res.data)\n    })\n    .catch((error) => {\n      dispatch(deleteProjectFailed(error));\n    })\n  })"]},"metadata":{},"sourceType":"module"}